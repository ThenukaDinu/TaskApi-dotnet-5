// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskApi.DataAccess;

namespace TaskApi.DataAccess.Migrations
{
    [DbContext(typeof(TodoDBContext))]
    [Migration("20210808182403_AuthorEntityAndData")]
    partial class AuthorEntityAndData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TaskApi.Modals.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FullName = "Thenuka Jayarathna"
                        },
                        new
                        {
                            Id = 2,
                            FullName = "Pubudu Gamage"
                        },
                        new
                        {
                            Id = 3,
                            FullName = "Nishadi Hansika"
                        },
                        new
                        {
                            Id = 4,
                            FullName = "Nipun Gallage"
                        },
                        new
                        {
                            Id = 5,
                            FullName = "Isuru Anjana"
                        });
                });

            modelBuilder.Entity("TaskApi.Modals.Todo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Due")
                        .HasColumnType("datetime2");

                    b.Property<int>("States")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Todos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Created = new DateTime(2021, 8, 8, 23, 54, 2, 994, DateTimeKind.Local).AddTicks(4114),
                            Description = "Get some text books for school",
                            Due = new DateTime(2021, 8, 13, 23, 54, 2, 995, DateTimeKind.Local).AddTicks(2209),
                            States = 0,
                            Title = "Get books for school"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 5,
                            Created = new DateTime(2021, 8, 8, 23, 54, 2, 995, DateTimeKind.Local).AddTicks(3122),
                            Description = "Get some food for next week",
                            Due = new DateTime(2021, 8, 11, 23, 54, 2, 995, DateTimeKind.Local).AddTicks(3127),
                            States = 0,
                            Title = "Shopping for next week"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            Created = new DateTime(2021, 8, 8, 23, 54, 2, 995, DateTimeKind.Local).AddTicks(3135),
                            Description = "Practice programming",
                            Due = new DateTime(2021, 8, 10, 23, 54, 2, 995, DateTimeKind.Local).AddTicks(3136),
                            States = 0,
                            Title = "Do some programming practice"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 1,
                            Created = new DateTime(2021, 8, 8, 23, 54, 2, 995, DateTimeKind.Local).AddTicks(3138),
                            Description = "Clean the room",
                            Due = new DateTime(2021, 8, 13, 23, 54, 2, 995, DateTimeKind.Local).AddTicks(3139),
                            States = 0,
                            Title = "Clean room"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 4,
                            Created = new DateTime(2021, 8, 8, 23, 54, 2, 995, DateTimeKind.Local).AddTicks(3140),
                            Description = "Finish daily workout",
                            Due = new DateTime(2021, 8, 9, 23, 54, 2, 995, DateTimeKind.Local).AddTicks(3141),
                            States = 0,
                            Title = "Workout for 30 minutes"
                        });
                });

            modelBuilder.Entity("TaskApi.Modals.Todo", b =>
                {
                    b.HasOne("TaskApi.Modals.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });
#pragma warning restore 612, 618
        }
    }
}
